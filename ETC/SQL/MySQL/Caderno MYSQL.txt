### Snippets ###
https://www.youtube.com/watch?v=Cz3WcZLRaWc
https://github.com/Newton-School/mysql-cheatsheet#:~:text=MySQL%20Cheat%20Sheet%20Help%20with%20SQL%20commands%20to,%23%20Permanently%20echo%20%27export%20PATH%3D%22%2Fusr%2Flocal%2Fmysql%2Fbin%3A%24PATH%22%27%20%3E%3E%20~%20%2F.bash_profile
https://drawsql.app/

- Criando Database:
Instalar SQLTools do vscode e adicionar uma nova connection com a informação

# ou pelos comandos #

>>>CREATE DATABASE nomedatabase;
>>>SHOW DATABASES;

### Criando uma TABLE: ###
-- @block # Essa linha vai adicionar um botão de Play e executar apanas oq está abaixo #
CREATE TABLE Users(
	id INT PRIMARY_KEY AUTO_INCREMENT, 
	email VARCHAR(255) NOT NULL UNIQUE,
	bio TEXT, 
	country VARCHAR(2),
);

### Inserindo informação: ###
-- @block
INSERT INTO Users (email, bio, country)
VALUES(
	'gabriel@gmail.com',
	'Olá, mundo!',
	'BR'
)

### Lendo Informação e retornando numa Result Table : ###
- Usar INDEX para databases muito grandes.
-- @block
SELECT email, id FROM Users;

WHERE country = 'BR'
AND email LIKE 'g%' # procurando pela letra G. #
OR id > 1

ORDER BY id ASC
LIMIT 2;

### Recomendações para o tipo de cada informação: ###
id: INT //lembre-se do auto_increment
nome: VARCHAR
nascimento: DATE // ano-mes-dia
idade: INT // PREFERENCIA USAR NASCIMENTO.
sexo: ENUM 'M','F' 
peso: FLOAT
altura: FLOAT
telefone: VARCHAR //DDD, Paranteses, ETC.
profissão: VARCHAR
descrição: TEXT

###### CADERNO ######

- SEMPRE FAÇA BACKUP ANTES DE MANIPULAR.
- Tipos primitivos: VER IMAGEM NA PASTA.

- Arquivos guardam TABELAS. 
- Tabelas armazenam REGISTROS. 
- Registros são compostos por CAMPOS.
- Constrains são regras para a gente definir para a criação de coisas dentro do BdD
- Pode usar comandos entre crases para adicionar acentos. `nome`. Mas não é 100% necessário.
- QUERY é uma pergunta, uma solicitação.

use [nome do Arquivo]; -> select * from [nome do arquivo];
select * [nome do Arquivo];
describe [nome do Arquivo];
Comandos DDL (Data Definition Language) :
create table if not exists cursos(): //Só cria tabela SE NÃO EXISTIR.
CREATE DATABASE cadastro; //Vai criar um novo banco de dados.
drop database cadastro;   //Vai deletar um banco de dados.
create table pessoas();   //Vai criar uma nova tabela.
NOT NULL; // Constrain que obriga que os dados sejam preenchidos.
UPDATE `tabela` SET `peso` = '75.4' WHERE `tabela`.`id` = 3;
id int AUTO_INCREMENT // É uma constrain que automaticamente acrescenta números. Normalmente para identidade.. 1, 2, 3....
Atualizando uma chave estrangeira: update gafanhotos set cursopreferido = '6' where id = '1';
Apelidos: 'from gafanhotos as g [comando]'. Vai usar sempre "g" para gafanhoto. Economizando tempo de digitação

constrain: PRIMARY KEY(id) // Aponta a chave primaria. Geralmente a primeira
constrain: CHAVE ESTRANGEIRA ...... // Relação entre 2 ou mais chaves primarias, importando uma chavef
constrain : UNIQUE // Não permite 2 registros com o mesmo nome. Geralmente nomes
constrain: UNSIGNED // Economiza 1 byte para cada registro
set ou enum ('M', 'F'), // diz quais valores serão aceitos. M, F, etc.
peso decimal (5, 2), // Vai reservar 5 espaços para peso. 2 é onde fica a vírgula antes de terminar. "102,35"
altura decimal(3, 2), // 3 Espaços reservados, virgula 2 casas antes de terminar. "1,72" 
nacionalidade varchar(20) DEFAULT 'Brasil' // 20 char max. Se nao digitarem nada, Brasil.
Collation recomendado: utf8_general_ci.
show create table [table]; //  Mostra o create table 
show crete database [database]; // Mostra o create database 

### COMANDO ALTER TABLE: ###
- Adicionando colunas (campos): 
alter table `cadastro`.`pessoas` //[[[[TUDO ABAIXO COMEÇA COM ESSE COMANDO]]]
add column profissao varchar(10); //Adicionando no final "after nome" vai adicionar esse campo em baixo de "nome" (exemplo). "first nome",
- Para deletar: drop column profissao; 
- Para deletar a TABELA: drop table cursos; // Sem alter table vai deletar a tabela toda.
- Para modificar as definições do campo: modify profissao varchar(20). 'Change' tambem serve
- Renomeando Coluna: change column profissao prof varchar(20). 'profissao' se torna 'prof'.
- Renomeando Tabela: rename to gafanhotos;
- Editando: insert into pessoas
- Adicionando uma chave estrangeira para um elemento na tabela: alter table gafanhotos add foreign key (cursopreferido) references cursos(idcurso;) // IDCurso seria  a primaria, que usa como referência para a estrangeira
Exemplo: ALTER TABLE `amigos` ADD `idade` INT NOT NULL AFTER `nome`;

- add primary key(nome); // vai adicionar a chave primeria para "nome"
	  (id, nome, nascimento, sexo, peso, altura, nacionalidade).
	  values
	  ('1', 'Godofredo', 'M', '78.5', '1.83', 'Brasil');// Dai so executar.
CASO DE PROBLEMA DE NOT NULL, adicionar no final: not null default '';
default character set utf8 // Cria uma constrain UTF8 para o banco de dados.
default collate uft8_general_ci; // mesma coisa.

- Modificando linhas incorretas:
UPDATE cursos //Começa sempre com UPDATE [table]
SET nome = 'HTML5'
WHERE idcurso = '1'; //Sempre pelo ID da column! MUITO CUIDADO COM 'WHERE'.

- Modificando linhas incorretas ao mesmo tempo:
SET nome = 'PHP', ano = '2015'
WHERE idcurso = '4';

- Deletando/Apagando linhas de column: 
DELETE FROM cursos
WHERE idcurso='8';

- Criando um Backup: Server -> data export.
'Dump Structure Only' vai exportar tudo com estrutura.
'Dump data only 'vai exportar apenas os dados sem estrutura.
'Include create schema' Recomendado marcado, vai importar o create database. Vai incluir a criação de banco de dados. Senão vai ter que refazer 'Create Database'
- Carregando um Backup: Server -> data import.
LIMIT 1; //Aponta ao MySQL quantas linhas podem ser afetadas. Para evitar multiplas alterações acidentalmente.

- Comandos SELECT:
select * from [table];    // ou: select nome, carga, ano from cursos. Exemplo.
ORDER by nome; 		  // Vai ordenar a tabela "Nome" ... CUIDADO O PONTO VIRGULA ; // 
ORDER by nome DESC ou ASC // Ordenar DESCENDENTE ou ASCENDENTE. CUIDADO O PONTO VIRGULA ;
Multiplos: ORDER BY ano, nome, descricao; // Em sequencia, ano, nome, descricao

- Seleção com JOIN e ON
select gafanhotos.nome, gafanhotos.cursopreferido, cursos.nome, cursos.ano
from gafanhotos join cursos
on cursos.idcurso = gafanhotos.cursopreferido;

select * from gafanhotos g (g = apelido)
join gafanhoto_assiste_curso a (a = apelido)
on g.id = a.idgafanhoto;

Faz a junção de todas as tabelas digitadas, 
juntando gafanhotos com cursos, 
onde a chave primario = chave estrangeira.
Juntando e mostrando 2 tabelas diferentes
//Usando INNER JOIN, ele checa se tem relação nas duas tabelas.
//Usando OUTER JOIN, ele considera quem está por fora da relação. LEFT para o primeiro comando, RIGHT para o segundo.
GAFANHOTO (LEFT) <---JUNÇÃO---> CURSO (RIGHT)

### WHERE ano = '2016' 	  // Vai selecionar especificamente tudo que tiver 2016 em 'ano'; '<=2016'. '>=2017' '!=2017 ou <>2017[tudo menos 2017]'... etc.
WHERE ano BETWEEN '2012' AND '2015' // Seleciona entre 2012 e 2015
IN ('2012', '2015', '2016') // Seleciona especificamente esses valores
carga > 35 AND < totaulas <30;  // Mostra apenas cargas acima de 35 e totaulas menores que 30
carga > 35 OR < totaulas <30; // Se atender apenas a uma das condições, ele mostra.
nome LIKE '%P'; 	// Seleciona tudo que termina com P.
nome LIKE 'A%'; 	// Seleciona tudo que COMEÇA e TERMINA com A. 
nome LIKE '%E%'; 	// Seleciona tudo que tiver "e" em QUALQUER lugar. Incluindo acentos.
nome LIKE 'PH%P_'; 	// Seleciona tudo que começar com PH, TERMINE com P e que tenha alguma coisa no FINAL_ ~
### SELECT DISTINCT nacionalidade FROM pessoas; // DISTINCT pega e mostra todos os valores e mostra eles apenas 1 vez sem repetir.
COUNT(*) from cursos WHERE carga > 30; // Conta quantos cursos tem. ONDE a carga é maior que 30.
COUNT(nome, idade, etc) // Customizavel
MAX(totaulas) from cursos where ano = '2015'; // Mostra apenas a maior quantidade de aulas, onde o ano é 2015
MIN(totaulas) [...] 	// menor
SUM(totaulas) 		// Mostra a somatoria do total de aulas 
AVG(totaulas) 		// Tira a média do total de aulas
GROUP BY 		// Depois da linha "SELECT", GROUP BY vai agrupar igual o Distinct + Order By. Eles AGRUPAM, não distinguem.
HAVING COUNT 		// Condição especifica. Having (nome) > 3, mostraria apenas nomes com mais de 3 caracteres. Having count(nome) mostra quantas vezes o nome em especifico se repete.

### Modelo Relacional: ###
- Comandos DDL (Data Definition Language):
CREATE DATABASE
CREATE TABLE
ALTER TABLE
DROP TABLE // Apaga a tabela inteira, dados e estrutura

- Comandos DML (Data Manipulation Language): 
INSERT INTO // Insere informações para uma column.
UPDATE // Atualiza informações em uma column.
DELETE
TRUNCATE // Apaga os dados mas mantem a estrutura.
SELECT // Até puxa uma nova qualificação, a DQL (DATA QUERY LANGUAGE). Pois ele seleciona, não manipula