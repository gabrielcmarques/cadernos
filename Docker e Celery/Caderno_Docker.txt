Referências:
https://www.youtube.com/watch?v=nh1ynJGJuT8
https://github.com/fabioruicci/django-postgresql-docker
https://www.youtube.com/watch?v=xxjzwdtWozI
Antes de tudo, verificar se a BIOS da máquina está com virtualização Enabled. 
Verificar no Windows Feature se tem Hyper-V e Virtual Machine Platform.

Nunca rode o docker container como o root user
Unprivileged container: A container that allows you to run NGINX in unprivileged mode. Um sub admin praticamente.
755: owner will have full acess, everyone else is read-only.

Docker é uma forma de empacotar Software para rodar em qualquer máquina. Sempre abra o Desktop app antes de executar os comandos

Dockerfile: É uma blueprint para construir um Docker
Image: É um template para rodar Docker Containers
Container: É um processo produzido a partir da Image

=====================================================
1: Criar venv, instalar django, criar requirements.txt na pasta raíz com o exemplo

Django==3.1.2
psycop2-binary==2.8.6

########
2: Criar Dockerfile (sem extensão, exatamente assim) com exemplo abaixo:

FROM python:3.8

ENV PYTHONDONTWRITEBYTECODE 1  
#Evita o python de gerar arquivos .pyc
ENV PYTHONNUNBUFFERED 1
#Evita as mensagens de log não ficarem armazenadas em buffer. Entrega imediata.

WORKDIR /code

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

######
FROM:    Define a imagem base usada na construção da imagem
ENV:     Variáveis de ambiente
WORDDIR: Working Directory, a source.
COPY: 	 Copia arquivos para executar no RUN na pasta /code (o ponto no final). "COPY . ." Primeiro Ponto copia tudo que está na pasta local e envia para a pasta /code. Nesse caso copiou TUDO.
RUN: executa instruções que o COPY jogou para a source.

#####
criar docker-compose.yml na pasta raíz, copiar e colar o código do git acima com msm nome, como exemplo.

docker-compose.yml:

version: Versão do Docker >Compose<.

services: #No caso web e db, 
  web:
    build: # Ponto significa que está no diretorio atual
    commands: # Dps da build, executa o comando nessa linha 
    volumes: # Sincroniza os arquivos locais com o Docker
    ports:   # Geralmente 8000:8000, define as portas
    depends_on: #Geralmente db, que faremos referência abaixo
  db:
    image: # Diz qual imagems e versão vamos usar (EX: postgres:13)
    environment: # Configuração de user env (EX: POSTGRES_USER=postgres, POSTGRES_PASSWORD=postgres)
    volumes: # Aponta onde vai ser salvo a informação (EX: postgres_data:/var/lib/postgresql/data/)
volumes:
  postgres_data:

######
.dockerignore: Criar um arquivo com esse nome permite fazer excessões, similar ao .gitignore
######
settings.py-> procurar por DATABASES, tudo abaixo com referência ao docker-compose.yml acima:

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql", 
        "NAME": "postgres",
        "USER": "postgres",
        "PASSWORD": "postgres",
        "HOST": "db",
        "PORT": 5432,
    }
}

#####
Shell venv -> 


docker-compose up 
#vai iniciar um servidor docker, executando todas as intruções que fornecemos no arquivo .yml, instalando e criando as variáveis que apontamos.

docker-compose down
#isso vai desativar o servidor docker

docker-compose up --build
#vai forçar o build do docker file novamente

docker-compose up -d
#vai fazer a mesma coisa, porém vai te deixar usar o terminal

docker-compose logs
#mostra os logs

docker ps
#Mostra uma lista dos containers pelo shell. -a no final para mostrar os containers parados

docker build -t [nome]/[tagname]:[version]
#Constroi uma imagem a partir do shell. -t para poder nomear. seguido do nome, tagname e version

docker-compose exec web python manage.py migrate
#permite executar om comando migrate pelo docker, no caso "web" é o nome do serviço dentro do docker-compose.yml

#docker-compose exec web python manage.py createsuperuser

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#####Comandos: 

docker run [container id]
#Roda o container pelo shell


##### Port Forwarding:
docker run -p 5000:8080 [container id]
#roda o container pelo shell com port específico


docker volume create [nome]
#Volume é uma pasta dedicada no host machine

docker run \
--mount source=[nome], target=/[outra pasta]

#####Debugging:
Desktop app -> Logs

pelo shell: (EXEMPLO)
ls
cd src
ls
cat index.html

######### DEPLOYMENT com London App Developer no youtube:
https://www.youtube.com/watch?v=nh1ynJGJuT8 ##########################################################################################################################################
1) Setup Docker
2) Add NGINX proxy
3) Modifying settings file

Criar Dockerfile na pasta raíz com:

FROM python:3.8-alpine

ENV PATH="/scripts:${PATH}"

COPY ./requirements.txt /requirements.txt
RUN apk add --update --no-cache --virtual .tmp gcc libc-dev linux-headers
RUN pip install -r /requirements.txt
RUN apk del .tmp

RUN mkdir /app 
COPY ./app /app 
WORKDIR /app
COPY ./scripts /scripts

RUN chmod +x /scripts/*

RUN mkdir -p /vol/web/media
RUN mkdir -p /vol/web/

RUN adduser -D user
RUN chown -R user:user /vol
RUN chmod -R 755 /vol/web
USER user

CMD ["entrypoint.sh"]

###
uWSGI: A tool that is used to run Python applications in production

adicionar no requirements.txt:
Django>=3.0.6,<3.1
uWSGI>=2.0.18,<2.1

criar e adicionar a pasta scripts, e dentro adicionar entrypoint.sh, dentro:

#!/bin/sh

set -e

python manage.py collectstatic --noinput
uwsgi --socket :8000 --master --enable-threads --module app.wsgi

criar docker-compose.yml na raíz com:
#Isso tudo abaixo é para local dev, não deploy

version: '3.7'

services:
  app:
    build:
      context: . 
    ports:
    - "8000:8000"
    volumes:
    - ./app:/app
    command: sh -c "python manage.py runserver 0.0.0.0:8000"
    environment:
    - DEBUG=1

#shell:
#O docker desktop tem que estar aberto para funcionar.
docker-compose up

### Creating NGINX proxy:
criar pasta nginx, criar default.conf dentro com:


server {
    listen 8080;

    location /static{
        alias /vol/static;
    }

    location / {
        uwsgi_pass app:8000;
        include /etc/ngix/uwsgi_params;
    }
}

criar dentro da pasta nginx o uwsgi_params com
#ref https://uwsgi-docs.readthedocs.io/en/latest/Nginx.html#what-is-the-uwsgi-params-file

uwsgi_param QUERY_STRING $query_string;
uwsgi_param REQUEST_METHOD $request_method;
uwsgi_param CONTENT_TYPE $content_type;
uwsgi_param CONTENT_LENGTH $content_length;
uwsgi_param REQUEST_URI $request_uri;
uwsgi_param PATH_INFO $document_uri;
uwsgi_param DOCUMENT_ROOT $document_root;
uwsgi_param SERVER_PROTOCOL $server_protocol;
uwsgi_param REMOTE_ADDR $remote_addr;
uwsgi_param REMOTE_PORT $remote_port;
uwsgi_param SERVER_ADDR $server_addr;
uwsgi_param SERVER_PORT $server_port;
uwsgi_param SERVER_NAME $server_name;

criar dentro da pasta nginx o arquivo Dockerfile com:

FROM nginxinc/nginx-unprivileged:1-alpine

COPY ./default.conf /etc/nginx/conf.d/default.conf
COPY ./uwsgi_params /ect/nginx/uwsgi_params

USER root

RUN mkdir -p /vol/static
RUN chmod 755 /vol/static

USER nginx

#Verificar se está tudo certo na build: shell:
cd nginx
docker build .

##Customize configuration of our django app:
#app->app->settings.py->

SECRET_KEY = os.environ.get('SECRET_KEY', 'changeme')

DEBUG = bool(int(os.environ.get('DEBUG', 0)))

ALLOWED_HOSTS = []

ALLOWED_HOSTS_ENV = os.environ.get('ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(','))


STATIC_URL = '/static/static/'
MEDIA_URL = '/static/media/'

STATIC_ROOT = '/vol/web/static'
MEDIA_ROOT = '/vol/web/media'

#Vamos simular criando docker-compos-deploy.yml na root com:

version: '3.7'

services:
  app:
    build:
      context: . 
    volumes:
      - static_data:/vol/web
    environment:
      - SECRET_KEY=samplesecretkey123
      - ALLOWED_HOSTS=127.0.0.1,localhost
  
  proxy:
    build:
      context: ./proxy
    volumes:
      - static_data:/vol/static    
    ports:
    - "8080:8080"
    depends_on:
      - app
  
  volumes:
    static_data:

#renomear a pasta nginx para "proxy" sem aspas
#shell-> se ainda estiver na pasta nginx, voltar com 
cd ..

docker-compose -f docker-compose-deploy.yml up --build

###### Comandos Básicos Linux: #####

Ubunto é um dos mais populares, vamos usar como referência.
search ubuntu.
https://hub.docker.com/search?q=ubuntu

terminal:
>>>docker run ubuntu

>>>docker run -it ubuntu
- inicia no modo interactive
root@2f643e986e9:/ # root = usuario, @[id] = nome da máquina. :/#$ = onde estamos na máquina 

>>>echo hello
hello
>>>whoami
root
>>>echo $0
pasta do bash

>>>history
mostra comandos usados anteriormente

>>>!2
2 últimos

### Package manager ###

>>>apt / apt-get 
mostra uma lista de packages

>>>apt list 
mostra todos os packages, nem todos estão instalados

>>>apt update
atualiza packages. Sempre usar antes de apt install

>>>apt install nano
instala nano

>>>nano
>>>Hello World
>>>Ctrl+X pra sair do nano
>>>Ctrl+L limpa a tela do terminal

>>>apt remove nano 
remove nano

### Linux file system ###
bin:  Binaries and Programs
boot: Inicializador
dev:  Devices
etc:  Editable Text Configuration
home: Onde home directories são armazenados
root: Home directory do Root user. Apenas o root user pode acessar
lib:  Library files
var:  Variable, arquivos que são atualizados frequentemente. Como logs, Application data....
proc: Arquivos que representam running processes

### Navigating the file system ###
>>>pwd
#Print Working Directory. Vai printar o diretorio atual 
>>>ls 
List. Lista os arquivos e diretorios da pasta atual
>>>ls -1 
#1 linha
>>>ls -l
#em lista 
>>>ls /bin
#lista todos os arquivos e diretorios dentro de bin 
>>>cd ~
change directory. Esse acima vai direto para home

### Manipulating files and directories ###
>>>mkdir test
#cria um diretorio test 
>>>mv test docker
#renomeia 'test' para 'docker'
>>>touch file1.txt file2.txt file3.txt
#cria 3 arquivos .txt
>>>mv hello.txt /etc
#vai mover o hello.txt para o diretorio etc 
>>>rm file1.txt file2.txt 
>>>rm file*
#remove arquivos especificos. file* = remove tudo que começa com 'file'
>>>remove -r docker/ 
#remove um diretorio inteiro com recursão

### Editing and viewing files ### 
>>>apt install nano
#editor de texto básico do linux
>>>nano file1.txt 
#cria arquivo txt. escreva algo, Ctrl+X para salvar
>>>cat file1.txt
>>>cat /etc/adduser.conf
#concatenate. Vai mostrar oq tem dentro de file1.txt. Segundo comando acessa um path absoluto
>>>more file.txt 
#igual cat, mais recomendado para arquivos com muito texto. Space para descer linhas, Enter desce linha por linha. 'Q' para sair
>>>apt install less
>>>less /etc/adduser.conf
#similar ao more, mais recomendado.
>>>head -n 5 /etc/adduser.conf
#mostra apenas as 5 primeiras linhas do .txt
>>>tail -n 5 /etc/adduser.conf
#mostra as 5 ultimas linhas do .txt

### Redirection ###
>>>cat file1.txt > file2.txt 
#vai ler o arquivo1, depois vai escrever o conteúdo para o arquivo2
>>>echo hello > hello.txt 
#cria um hello.txt com uma string 'hello' dentro
>>>ls -l /etc > files.txt
#vai listar os arquivos dentro de etc e armazenar a informação em files.txt

