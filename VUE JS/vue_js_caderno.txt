- Video reference: https://youtu.be/bzlFvd0b65c
- Github Reference: https://github.com/Code-Pop/Intro-to-Vue-3
- CodePen: https://codepen.io/VueMastery/projects/public?cursor=ZD0xJm89MCZwPTEmdj01MTcwODI%3D
- Doc https://vuejs.org/guide/introduction.html

#############
- Introdução:
>>>git clone https://github.com/gabrielcmarques/Intro-to-Vue-3.git

- root/intro/index.html:
<!-- Import Styles -->
<link rel="stylesheet" href="./assets/styles.css" />
<!-- Import Vue.js -->
<script src="https://unpkg.com/vue@3.0.0-beta.12/dist/vue.global.js"></script>

- root/intro/main.js:
const app = Vue.createApp({ //Criamos um app simples
  data: function() { //Função simples para retornar algo
    return {
      product: 'Socks'
    }
  }
})

- root/intro/index.html:

  <body>
    <div id="app">
      <h1>{{ product }}</h1> 
    </div>

    <!-- Import App -->
    <script src="./main.js"></script>

    <!-- Mount App -->
    <script>
      const mountedApp = app.mount('#app') 
    </script>
  </body>

### Pattern: ###
// const app em main.js -> script const mountedApp em index.html -> div id="app" <h1>{{ product }}</h1> /div

### Exemplo Alterando Dinamicamente ###
mountedApp.product = 'Shoes'
mountedApp.product = 'Sandals'

### Outros exemplos ###
<h1>{{ product }}</h1>
<p>{{ firstName + ' ' + lastName }}</p>
<span>{{ clicked ? true : false }}</span>
<div>{{ message.method() }}</div>

############################
- Attribute Binding: Imagens 

>>>cd Intro-to-Vue-3
>>>git checkout L3-start

- root/intro/main.js:
const app = Vue.createApp({
    data() {
        return {
            product: 'Socks',
            image: './assets/images/socks_green.jpg'
        }
    }
})

- root/intro/index.html:
<div class="product-image">
  <img v-bind:src="image">
</div>

### Pattern ###
- main.js const app: image: '...' -> index.html img v-bind:src="image"
// Ele vai estimar {{ image }} e vbind da mesma forma. Para ainda mais simplicidade, 
// podemos utilizar apenas <img :src="image"> que ele vai estimar também.

### Outros exemplos ###
- Podemos também usar isso em descrições, urls, valores dinâmicos, desabilitando botões...
<img :src="image">
<img :alt="description">
<a :href="url">
<div :class="isActive">
<span :style="isActive">
<span :disabled="isDisabled">

########################
- Conditional Rendering:

>>>git checkout L4-start

- root/intro/main.js:
const app = Vue.createApp({
    data() {
        return {
            product: 'Socks',
            image: './assets/images/socks_blue.jpg',
            inStock: true
        }
    }
})

- root/intro/index.html:
  <h1>{{ product }}</h1>
  <p v-if="inStock">In Stock</p>
  <p v-else>Out of Stock</p>

// Queremos que apenas um dos paragrafos acima apareçam de acordo com
// a condição de estoque.Caso sim, primeiro paragrafo. Senão, segundo.
// Mude para false o valor e veja no browser. Caso tenha apenas um elemento, 
// não é obrigatório utilizar um v-else.

### Mais exemplos ###
// Condicional simples
  <p v-if="inStock">In Stock</p>
  <p v-else>Out of Stock</p>
  
// Mais interessante caso tenhamos algo na tela ficando ON e OFF frequentemente.
// no DOM ele adiciona style="display:none; " para a tag p abaixo.
  <p v-show="inStock">In Stock</p> 

### Chain Conditional Logic: ###

- root/intro/main.js:
return {
  product: 'Socks',
  image: './assets/images/socks_blue.jpg',
  inventory: 100
}

- root/intro/index.html:
<div class="product-info">
  <p v-if="inventory > 10">In Stock</p>
  <p v-else-if="inventory <= 10 && inventory > 0>">Almost sold out</p>
  <p v-else>Out of Stock</p>
</div>
// Experimente mudar valores. 100, 8, 0...

#################
- List Renreding:

>>>git checkout L5-start 
- Agora temos uma lista com details em main.js, vamos renderizar:
"details: ['50% cotton', '30% wool', '20% polyester']"

- root/intro/index.html:
  <h1>{{ product }}</h1>
  <p v-if="inStock">In Stock</p>
  <p v-else>Out of Stock</p>
  <ul>
    <li v-for="detail in details"> {{ detail }}</li>
  </ul>
// Pra cada valor dentro de details, imprima: {{ detail }}

### Mais exemplos: ###
- Array em main.js:
details: ['50% cotton', '30% wool', '20% polyester'],
variants: [
  { id: 2234, color: 'green' },
  { id: 2235, color: 'blue' },
]

- index.html:
<ul>
  <li>
</ul>
<div v-for="variant in variants">{{ variant.color }}</div>
// Vai imprimir ambos green e blue. Muito cuidado com informações sensíveis.

### Setting the Key Attribute ###

<div v-for="variant in variants" :key="variant.id">{{ variant.color }}</div>
// Vai dar uma key única para cada elemento DOM. 

#################
- Event Handling:
>>>git checkout L6-start 

- Nesse exemplo temos um botao 'Add to Cart' e acima 
outro 'Cart'. Vamos trabalhar neles com Click Events: 

- index.html:
<div class="cart">Cart({{ cart }})</div>
...
...
<button class="button" v-on:click="cart += 1">Add to Cart</button>

- Agora vai adicionar em tempo real o cart. Podemos também utilizar funções:

- index.html:
<button class="button" v-on:click="addToCart">Add to Cart</button>

- main.js:
const app = Vue.createApp({
    data() {
        return {
            cart:0,
            ...
            ]
        }
    },
    methods: {
      addToCart() {
        this.cart += 1 //Se refere ao cart:0 acima e aplica dentro de v-on:click="addToCart"
      }
    }
})

// v-on:click="..." pode ser simplificado para apenas @click="..." como atalho.

### Implementando mudança de cor de Imagem com event listener: ###
- index.html:
<div v-for="variant in variants" :key="variant.id" @mouseover="updateImage(variant.image">{{ variant.color }}</div>

- main.js:
...
...
    methods: {
      addToCart() {
        this.cart += 1
      },
      updateImage(variantImage) {
        this.image = variantImage 
      }
    }
})

# Comparar os checkouts x-start com x-end #

32:20 >>

### Computed Properties ###
>>>git checkout L7-start

- Temos uma nova informacao no main.js "brand", vamos aplicar uma 
propriedade 'computed' para juntar a informacao 'brand' com 'property':

- main.js:
const app = Vue.createApp({
    data() {
        return {
            ...
            ]
        }
    },
    methods: {        
        ...
        }
    },
    computed: {
        title() {
            return this.brand + ' ' + this.product
        }
    }
})

- index.html:
<div id="product-info">
    <h1>{{ title }}</h1>
</div>

// Vai retornar automaticamente sem brand + product sem precisar fazer 
// algo tipo title.product + ' ' + title.brand nesse h1 acima.
// É recomendado fazer dessa forma por conta de performance!

### Condicional de estoque ### 
>>>git checkout L8-start
- Nesse exemplo temos 2 cores com mousehover, caso mouse hover, muda as cores do produto. 
Queremos também mudar se está ou não em estoque quando muda de cor, dinamicamente: 

# Sequencia: #
1) index.html: @mouseover="updateImage(variant.image)" 
2) main.js: image: './assets/images/socks_blue.jpg',
3) variants: [
    { id: 2234, color: 'green', image: './assets/images/socks_green.jpg', quantity: 50 },
    { id: 2235, color: 'blue', image: './assets/images/socks_blue.jpg', quantity: 0 },
]

- index.html:
<div 
    ...
    class="color-circle" 
    v-for="(variant, index) in variants" 
    :key="variant.id" 
    @mouseover="updateVariant(index)" 
    ...
</div>

main.js:
const app = Vue.createApp({
    data() {
        return {
            ...
            selectedVariant: 0,
            ...
            variants: [
              { id: 2234, color: 'green', image: './assets/images/socks_green.jpg', quantity: 50 },
              { id: 2235, color: 'blue', image: './assets/images/socks_blue.jpg', quantity: 0 },
            ]
        }
    },
    methods: {
        addToCart() {
            this.cart += 1
        },
        updateVariant(index) {
            this.selectedVariant = index 
        }
    },
    computed: {
    title() {
        return this.brand + ' ' + this.product
    },
    image() {
        return this.variants[this.selectedVariant].image //this.variants = os 2 elementos acima nesse caso
    },
    inStock() {
        return this.variants[this.selectedVariant].quantity
    },
}
...

### Components and Props ###
- Encapsulando componentes em uma pasta separada:
>>>git checkout L9-start 
ate 
>>>git checkout L9-end 

- Criar pasta root/components/ProductDisplay.js, copiar componente especifico do html e do js, encapsular nesse arquivo novo.

### Communicating Events ###
- O desafio vai ser utilizar o botão em html se comunicar com main.js:
>>>git checkout L10-start

- em components/ProductDisplay.js:
...
  methods: {
      addToCart() {
          this.$emit('add-to-cart', this.variants[this.selectedVariant].id)
      },
...

- em index.html:
...
    <product-display 
    :premium="premium" 
    @add-to-cart="updateCart"
    @remove-from-cart="removeById"> <!-- solution -->
    </product-display>
...

// Esse botao html product-display @add-to-cart vai ser ouvido por addToCart() no ProductDisplay.js,
// que vai disparar uma função updateCart(), que vive em main.js.

### Forms with Vue ###
- Formularios em VueJS
>>>git checkout L11-start

- criar root/components os arquivos ReviewForm.js e ReviewList.js, como no checkout.
Os 3 inputs especificos estão vínculados com a função data() abaixo:

<form class="review-form" @submit.prevent="onSubmit"> <--- @.prevent previne que o browser atualize.
    ...
    <input id="name" v-model="name"> <--- data() name
    ...
    <textarea id="review" v-model="review"></textarea> <--- data() review
    ...
    <select id="rating" v-model.number="rating"> <--- data() rating
        <option>5</option>
        <option>4</option>
        <option>3</option>
        <option>2</option>
        <option>1</option>
    </select>
</form>`,
...
data() {
    return {
      name: '',
      review: '',
      rating: null,
      // solution
      recommend: null
      // solution
    }
  },
  methods: {
    onSubmit() {
    ...
    ...
      let productReview = {
        name: this.name,
        review: this.review,
        rating: this.rating,
        recommend: this.recommend // solution
        ...
        ...

- importar em index.html: 
<!-- Import Components -->
<script src="./components/ProductDisplay.js"></script>
<script src="./components/ReviewForm.js"></script>


- usar em ProductDisplay.js:
...
<review-form></review-form>
...

- Agora vamos ter o form simples. Se tudo estiver ok, vamos continuar adicionando os eventos:

...
<review-form @review-submited="addReview"></review-form>
...

data() {
return {
    ...
    ...
    ],
    reviews: [] <---
...
  methods: {
      addToCart() {
         ...,
      addReview(review) { <--
        this.reviews.push(review) <--
      }
  },

- Displaying reviews:
- root/components/ReviewList.js:

app.component('review-list', {
  props: {
    reviews: {
      type: Array,
      required: true
    }
  },
  template:
  /*html*/
  `
  <div class="review-container">
  <h3>Reviews:</h3>
    <ul>
      <li v-for="(review, index) in reviews" :key="index">
        {{ review.name }} gave this {{ review.rating }} stars
        <br/>
        "{{ review.review }}"
        <br/>
        <!-- solution -->
        Recommended: {{ review.recommend }}
        <!-- solution -->
      </li>
    </ul>
  </div>
`
})

- importar em index.html:
<script src="./components/ReviewList.js"></script>

- adicionar em ProductDisplay.js:
...
    <review-list v-if="reviews.length" :reviews="reviews"></review-list>
    <review-form @review-submitted="addReview"></review-form>
...

https://youtu.be/bzlFvd0b65c?t=3267