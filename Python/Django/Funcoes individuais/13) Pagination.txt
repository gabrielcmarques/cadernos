Templates e Resources:
https://www.udemy.com/course/python-django-2021-complete-course/learn/lecture/27270386#overview
https://docs.djangoproject.com/en/4.0/ref/paginator/
https://github.com/divanov11/Django-2021/tree/master/resources
https://github.com/mouse-board/django-html-pagination-snippet/
https://gist.github.com/mariocesar/8104254

### Adicionando paginação no webiste para limitar a informação exibida na tela: ###
- Template referência: DevSearch-Theme/projects.html 

#Criando ordanação
Projects/models.py:


class Project(models.Model):
	...
	
	class Meta:
        ordering = ['-vote_ratio', '-vote_total', 'title']
		#Normal = Mais velho primeiro. 
		#'-' = Mais novos primeiro.



https://github.com/divanov11/Django-2021/blob/master/projects/utils.py
- Criar Projects/utils.py:

from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage

def paginateProjects(request, projects, results):

    page = request.GET.get('page')
    paginator = Paginator(projects, results)

    try:
        projects = paginator.page(page)
    except PageNotAnInteger:
        page = 1
        projects = paginator.page(page)
    except EmptyPage:
        page = paginator.num_pages
        projects = paginator.page(page)

    leftIndex = (int(page) - 4)

    if leftIndex < 1:
        leftIndex = 1

    rightIndex = (int(page) + 5)

    if rightIndex > paginator.num_pages:
        rightIndex = paginator.num_pages + 1

    custom_range = range(leftIndex, rightIndex)

    return custom_range, projects


https://github.com/divanov11/Django-2021/blob/master/projects/views.py
- ProjectApp/views.py:

from .utils import paginateProjects

def projects(request):
    custom_range, projects = paginateProjects(request, projects, 6) #6 = páginas, exemplo.
    context = {'projects': projects, 'custom_range': custom_range}
    return render(request, 'projects/projects.html', context)

https://github.com/divanov11/Django-2021/tree/master/resources/DevSearch-Theme
- DevSearch-Theme/index.html como referência
- Criar Root/templates/projects/pagination.html
- Depois que mover para o root, a variável muda de 'projects' para 'queryset', para ser dinâmico

{% if queryset.has_other_pages %}
<div class="pagination">
	<ul class="container">
	
		{% if queryset.has_previous %}
        <li><a href="?page={{queryset.previous_page_number}}" class="btn page-link" 
		data-page="{{queryset.previous_page_number}}">&#10094; Prev</a></li>
        {% endif %}
	
	
		{% for page in paginator.page_range %} #ver no doc isso		
			{% if page == queryset.number %}
			<li><a href="?page={{page}}" class="btn page-link btn--sub" data-page="{{page}}">{{page}}</a></li>
			{% else %}
			<li><a href="?page={{page}}" class="btn page-link" data-page="{{page}}">{{page}}</a></li>
			{% endif %}		
        {% endfor %}
		
		{% if queryset.has_next %}
        <li><a href="?page={{queryset.next_page_number}}" class="btn page-link" 
		data-page="{{queryset.next_page_number}}">&#10094; Prev</a></li>
        {% endif %}
		
		{% endfor %}
	</ul>
</div>
{% endif %}


https://github.com/divanov11/Django-2021/blob/master/projects/templates/projects/projects.html
- Projects/templates/projects/projects.html:
- Antes de fechar o main:

#A principio apenas {% include 'pagination.html' %}. 
#O de baixo vai renomear a variável 'queryset' para 'projects'.
#Custom range = tamanho da paginação.
{% include 'pagination.html' with queryset=projects custom_range=custom_range %}

</main>
{% endblock %}

https://github.com/divanov11/Django-2021/blob/master/users/templates/users/profiles.html
Users/templates/users/profiles.html
- Mesma coisa.

{% include 'pagination.html' with queryset=profiles custom_range=custom_range %}

</main>
{% endblock %}

https://github.com/divanov11/Django-2021/blob/master/users/utils.py
- Users/utils.py: 

def paginateProfiles(request, profiles, results):
    page = request.GET.get('page')
    paginator = Paginator(profiles, results)

    try:
        profiles = paginator.page(page)
    except PageNotAnInteger:
        page = 1
        profiles = paginator.page(page)
    except EmptyPage:
        page = paginator.num_pages
        profiles = paginator.page(page)

    leftIndex = (int(page) - 4)

    if leftIndex < 1:
        leftIndex = 1

    rightIndex = (int(page) + 5)

    if rightIndex > paginator.num_pages:
        rightIndex = paginator.num_pages + 1

    custom_range = range(leftIndex, rightIndex)

    return custom_range, profiles

https://github.com/divanov11/Django-2021/blob/master/users/views.py	
- Users/views.py:

def profiles(request):
    custom_range, profiles = paginateProfiles(request, profiles, 3)
	#...
    context = {'profiles': profiles, 'custom_range': custom_range}
    return render(request, 'users/profiles.html', context)