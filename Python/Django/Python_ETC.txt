### PACOTE RANDOM ###
- Serve para gerar informação aleatória para o código
https://docs.python.org/3/library/random.html

### PACOTE MARSHMALLOW ###
- Serve para Serilizar e Desereazliar informação
https://marshmallow.readthedocs.io/en/stable/

### Função Lambda exemplos ###:
Serve para criar funções rápidas diretamente no código como output

- Regular:
def quadrado(x):
	return x **2
	
quadrado(5)
>>>25

- Lambda:
(lambda x: x ** 2)(5)
>>>25

f = lambda a, b: a + b
f(1, 41)
>>>42

f = lambda a, b=41: a + b
f(1)
>>>42

f = lambda *args: sum(args)
f(1, 2, 3)
>>>6

f = lambda **kwargs: sum(kwargs.values())
f(primeiro = 1, segundo = 2, terceiro = 3)
>>>6

# Quando usar Lambda Functions:
https://youtu.be/zH_0jUmgpyc?t=490
# Exemplo1:
alunos = [
	"ALUNO_30",
	"ALUNO_01",
	"ALUNO_101",
	"ALUNO_20",
	"ALUNO_10",
	"ALUNO_100",
]
sorted(alunos)
['ALUNO_01', 'ALUNO_10', 'ALUNO_100', 'ALUNO_101', 'ALUNO_20', 'ALUNO_30']

# Correção lambda que vai pegar apenas a string dos números, transformar em inteiro e em seguida ordernar:
sorted(alunos, key=lambda x: int(x[6:]))
['ALUNO_01', 'ALUNO_10', 'ALUNO_20', 'ALUNO_30', 'ALUNO_100', 'ALUNO_101']

# Exemplo2:
def f1(x):
	return x ** 2
	
def f1(x):
	return x ** 3
	
def f1(x):
	return x ** 4

funcoes = [f1, f2, f3]
>>>25
>>>125
>>>325

# Com lambda:
for f in funcoes:
	print(f(5))

funcoes = [
	lambda x: x ** 2,
	lambda x: x ** 3,
	lambda x: x ** 4,
]

for f in funcoes:
	print(f(5))
>>>25
>>>125
>>>325

# Exemplo3:
def transforma_maiusc(x):
	return x.upper()

nomes_upper = map(transforma_maiusc, ["gabriel"], ["marques"])
list(nomes_upper)
>>>['GABRIEL', 'MARQUES']

# Com Lambda: 
nomes_maiusc = map(lambda x: x.upper(), ["gabriel"], ["marques"])
list(nomes_maiusc)
>>>['GABRIEL', 'MARQUES']

# Lambda + List Compr:
[x.upper() for x in ["gabriel"], ["marques"]]
>>>['GABRIEL', 'MARQUES']

# Exemplo4:
def tem_u(x):
	return "u" in x

nomes_com_a = filter(tem_a, ["gabriel", "marques"])
list(nomes_com_a)
>>>['marques']

# Lambda:
nomes_com_u = filter(lambda x: "u" in x, ["gabriel", "marques"])
list(nomes_com_a)
>>>['marques']

# Lambda + List Compr:
[x for x in ["gabriel", "marques"] if "u" in x]
>>>['marques']

### Coisas para evitar no Lambda:
- Evitar deixar muito difícil de ser lido:

# Exemplo:
def menor(x, y):
	if x < y:
		return x 
	return y
	
menor(10, 5)
>>>5

# Lambda:
f = lambda x, y: x if x < y else y 
f(10, 5)
>>>5

# Exemplo2 Função + Lambda : 
def cria_funcao_quadratica(a, b, c):
	return lambda x: a*x**2 + b*x + c

f = cria_funcao_quadratica(2, 1, 2)
print(f(0))
print(f(1))
print(f(2))
>>>2
>>>5
>>>12

# Lambda (uma lambda dentro da outra):
f = (lambda a, b, c: lambda x: a*x**2 + b*x +c)(2, 1, 3)
f(1)

### Função Enumerate ###
- O Enumerate é ótimo para printar pares de informação numa lista

# Comparando com For-in:

comidas = ["pizza", "pastel", "esfiha"]
contador = 1
for comida in comidas:
	print(f"#{contador} - {comida}")
	contador += 1
>>>#1 - pizza
>>>#2 - pastel
>>>#3 - esfiha

- Comparando com Range-len
for i in range(len(comidas)):
	print(f"#{i+1} - {comidas[i]}")
>>>#1 - pizza
>>>#2 - pastel
>>>#3 - esfiha

-- Comparando com ENUMERATE() --
pares = enumerate(comidas)
list(pares)
[(0, 'pizza'), (1, 'pastel'), (2, 'esfiha')]

- Unpacking com Enumerate:
# Em vez de fazer isso:

par = (0, 'gabriel')
posicao = par[0]
nome = par[1]

print(posicao, nome)

# Podemos fazer isso:

par = (0, 'gabriel')
posicao, nome = par
print(posicao, nome)

par = (0, 'pizza')
i, comida = par
print(i, comida)

-- Enumerate() em ação: --
for i, comida in enumerate(comidas):
	print(f"#`{i + 1} - {comida}")
	
>>>pizza 
>>>pastel 
>>> esfiha

- Outras variáveis: 
for i, comida in enumerate(comidas, start=1):

