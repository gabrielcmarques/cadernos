###### Anotações resumidas Python: ######

### Aninhamento em print ###
nome = 'gabriel'
print('Olá {:>20}'.format(nome))
>>>Olá              gabriel

ceil(): Arredondamento pra 'cima'
floor(): Arredondamento para 'baixo'
truc(): trunca sem arredondamento '.format(num,math.trunc(num)))'
pow(): Power, potência. Similar a **
sqrt(): Calcular raíz quadrada (SQuareRooT)
factorial(): calculo fatorial
len(frase) indica a quantidade de caracteres da frase
map()

### Transformação: ###
'-'.join(frase) junta todos os elementos (do codigo acima) de frase e usa '-' entre os espaços.
frase.split() Pega aonde tem espaços e cria uma divisão. Cria novas indexações para cada palavra e coloca dentro de uma Lista.
frase.replace('Python', 'Android') = Procura e substitui 'Python' por 'Android'
frase.upper() converte para MAIUSCULO
frase.lower() converte para minusculo
frase.capitalize() Primeira letra Maiusculo
frase.title() Converte cada primeira letra das palavras em Maiusculo
frase.strip() remove todos os espaços inúteis no inicio e final da frase (Menos os de meio, que separam as palavras)
frase.rstrip() R significa Right (Direita), remove apenas somente os ultimos espaços inuteis
frase.lstrip() L significa Left (Esquerda), remove apenas os primeiros espaços inuteis

### Manipulando texto: ###
# Fatiamento:
frase = cursoemvideopython
frase[:5] >>>curso
frase[15:] >>>python
frase[9:21:2] (do 9 até 21 pulando de 2 em 2) 
frase[9::2] (do 9  ate o final, de 2 em 2)
frase.count('o') conta quantas vezes aparece a letra 'o' (NOTA: MINÚSCULO)
frase.count('o', 0, 13) faz contagem com fatiamento = "Contar 'o' do 0 até o 13"
frase.find('deo') indica em qual espaço da memoria começa "deo" = cursoemvi'deo'python, começa no espaço 11
Se não encontrar, ele retorna -1. Que indica que não foi encontrado.
'Curso' in frase, procuraria "Curso" na string frase e retorna True/False

### Repetições FOR ###
for c in range(10, 1, -1): "de 10 ate 1, tire 1"
for c in range(0, 7, 2): "de 0 ate 6, pulando de 2 em 2"

### Tuplas: ###
print("n1[0]))
print("n1[0:2])) (entre o 0 a 1)
print("n1[1:])) (Comece no 1 até o final)
print("n1[-1])) (apenas o último)
for c in n1:
   print(c) //1 2 3 4 5

### Dicionários: {} ###
informacao = {
"nome": "Gabriel C",
"idade": 27,
"email": "gabriel@email.com",
"telefone": 9999-8888,
"verificado": True
}
print(informacao[nome])         // Gabriel C
print(informacao.get(nome))     // Se nao existir, retorna "none" invez de erro. Mesmo com multiplas procuras.
informacao["nome"] = "Daniel T" // Vai alterar

### Construtores/Constructors: ###
class Point:
   def __init__(self, x, y): //Método construtor
      self.x = x
      self.y = y
	  

   def move(self)
      print("move")
	  
   def draw(self):
      print("draw")
   
point = Point(10, 20)
point.x = 10
print(point.x)

### Herança: Mecanismo para reutilização de classes ###
class Mamifero:
def walk(self):
      print("walk") 

class Dog(Mamifero):  //Herda todos os atributos da classe Mamifero
   def bark(self):
      print("latido")
  
dog1 = Dog()
dog1.walk()

### Funções matemáticas: ###
import math
x = 2.9
print(abs(-2.9))       // Retorna 2.9
print(math.ceil(2.9))  // Retorna 3
print(math.floor(2.9)) // Retorna 2

### Nested loops: ###
# for x in range(4):
   for y in range(3):
      print(f'({x}, {y})')
Resultado:
(x, y)
(0, 0)
(0, 1)
(0, 2)
(1, 0)
(1, 1)
(1, 2)[...]
numbers = [5, 2, 5, 2, 2]
for x_count in numbers:
    print('x' * x_count)

>>>	xxxxx
	xx
	xxxxx
	xx
	xx

### Listas 2d (Matriz): ###
matriz = [
1, 2, 3
4, 5, 6
7, 8, 9
]
print(matriz[0][1]) // 2
print(matriz[1][2]) // 6
print(matriz[2][0]) // 7

for m in matriz:
   for item in m:
      print(item) // Vai imprimir de 1 a 9, da matriz.

### Comandos para listas: [] ###
# numbers = [5, 4, 3, 2, 1]
numbers.append(7)    // numbers = [5, 4, 3, 2, 1, 7] sempre no fim
numbers.inser(0, 10) // numbers = [10, 5, 4, 3, 2, 1, 4]na posicao 0. Todos os outros sao empurrados para frenrte
numbers.remove(5)    // numbers = [4, 3, 2, 1, 4] remove o primeiro numero 5 que encontrar
numbers.index(5)     // Procura o primeiro numero 5 e aponta.// print(50 in numbers) tambem serve
numbers.clear      // Remove tudo
numbers.pop()      // Remove o ultimo
numbers.sort()     // Organiza do menor pro maior
numbers.reverse()  // Organiza do maior pro menor
numbers.copy()     // Copia

### Ordem de Precadência: ###
#1: ()
#2: **
#3: * / // %
#4: + -

### Cores no Terminal: ###
\033[m Entre o [ e m colocar o codigo da cor. Código asci
style, text, back
\033[0;33;44m
=>Style: 0 = none. 1 = bold. 4 = underline. 7 = negative.
=>text: 30 a 37 cores
=>back: 40 a 47 cores

__repr__(self) = DEBUGGING

### Classes e Subclasses ###
EX: Classe Trabalhador
Subclasses de Trabalhador: Engenheiros, Programadores, Professores[...]

class Trabalhador():
    [codigo]
    [...]

class Engenheiro(Trabalhador)
    [codigo de Trabalhador puxado automaticamente]
    [codigo]
    [...]

///////////////
class Employee:
    num_of_emps = 0
    raise_ammount = 1.04

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
        self.email = first + '.' + last + '@company.com'

        Employee.num_of_emps += 1

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_ammount)

emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'User', 60000)
print(Employee.num_of_emps)

### Multithread ###
# Exemplo abaixo: Baixando imagens com threads assincronizadas:

import request
import time
import concurrent.futures

img_urls = [
    #url de foto,
	#url de foto .png,
	#url de foto .png,
	#url de foto .png,
	#url de foto .png,
]

def download_image(img_url):
    img_bytes = request.get(img_url).content
    img_name = img_url.split('/')[3]
    img_name = f'{img_name}.jpg'
    with open(img_name, 'wb') as img_file:
        img_file.write(img_bytes)
        print(f'{img_name} was downloaded')

with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(download_image, img_urls) #Usa a função acima em cada url em Thread assincronizado

t2 = time.perf_counter()
print(f'Finished in {t2-t1} seconds')