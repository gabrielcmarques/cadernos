###### DEBUG: CÓDIGO PARA VISUALIZAR OS ATRIBUTOS DENTRO DAS VARIÁVEIS ######

import httpresponse

def see_request(request):
	text = f"""
	Some attributes of the HttpRequest Object:
	
	scheme:  {request.scheme}
	path: 	 {request.path}
	method:  {request.method}
	GET: 	 {request.GET}
	uset: 	 {request.user}
	# [...]
	"""
	
	return HttpResponse(text, content_type="text/plain")
	
- urls.py: from project import views as project_views 
			  path("see_request/", project_views.see_request)
			  
- Info pela URL: https://127.0.0.1:8000/see_request/?breakfast=spam&lunch=spam
- Resultado: <QueryDict: {'breakfast': ['spam'], 'lunch': ['spam']}>
##############################################################################
import httpresponse

def user_info(request):
	text = f"""
	Some attributes of the HttpRequest Object:
	
	username:  {request.username}
	is_anonymous: 	 {request.is_anonymous}
	is_staff:  {request.is_staff}
	is_superuser: 	 {request.is_superuser}
	is_active: 	 {request.is_active}
	"""
	
	return HttpResponse(text, content_type="text/plain")
	
- urls.py -> from project import views as project_views 
			  path("user_info/", project_views.user_info)
			  
###### Logando como admin, resultado: ######
	is_anonymous: False	
	is_staff:  	  True
	is_superuser: True 
	is_active: 	  True

############################################################
- CRIANDO VIRTUALENV SNIPPET:

>>>python -m venv venv
>>>pip install "django[version]" https://www.djangoproject.com/
>>>pip freeze
>>>pip install --upgrade pip
>>>django-admin startproject startproject [nomeProject] . 
>>>cd [nomeProject]
>>>python manage.py startapp [subProject]
>>>pip install "Django>=3.2,<3.3" 
>>>pip install Django==3.2.5      
>>>python -m django //(mostra os subcomandos)
>>>pip install --upgrade pip
>>>pip freeze > requirements.txt

>>>python manage.py makemigrations
>>>python manage.py migrate
>>>code . 


- Selecionando interpretador: O path vai estar em bin\python //(Sem números, apenas python.shortcut)
>>>.\Scripts\activate //(vai poder dar pra usar em outras Tabs de terminal tb)
>>>pip install -r requirements.txt
>>>python -m django startproject [nome] .
>>>which python // (mostra o caminho onde python está instalado)
>>>which python3
>>>which python3.6
>>>ii .  		  //(abre a pasta atual. 'open .' no mac)
>>>ls -al 		  //mostra mais específico
>>>rm -rf [pasta] //deleta a pasta

### EDITOR: ###
VScode -> File -> Save Workspace As. //(Salva facilmente o projeto atual sem compilar, similar ao photoshop.) 
print(dir(codigo)) //(Muito bom para fazer debug. Dando F5 na URL mostra no terminal)

### Importações interessantes e breve descrição: ###
from django.http import HttpResponse # (permite printar html)
from django.http import Http404 	 # (error handling)
from django.shortcuts import get_object_or_404 # (calls the given model and get
 object from that if that object or model doesn’t 
exist it raise 404 error. |subApp views.py)
from django.template.loader import render_to_string #(Permite printar
 strings a partir de templates .htmls. Talvez precise de {} adicionais ou ate % %)

from django.contrib.auth import authenticate, login, redirect 
- authenticate: Serve para validar login e logout. 															  
- login: Facilita o log in
- redirect: redireciona para alguma url específica após alguma ação)

from django.contrib.auth.decorators import login_required 
- redireciona o usuário para tela de login caso não estiver logado. Decorador.

from dianjo.contrib.auth.forms import UserCreationForm 
- (serve para a criação de forms(.py) de cadastro. {{ form.as_p }} dentro dos templates) 
from dianjo.contrib.auth.forms import AuthenticationForm 
- (serve para a autenticação de forms de Login / login_view, {{ form.as_p }} dentro dos templates) 
from django.conf import settings 
- (permite fazer referência de variáveis dentro de settings.py )
																				
import dotenv //(Usado mais em manage.py, tem pacotes que servem para ler arquivos ocultos que servem para esconder certas informações. .env por exemplo. Ver doc)
from dianjo.utils.text import slugify //(torna qualquer string em uma string slug, entre '-' e minusculo.)
from django.db.models.signals import pre_save, post_save //(conecta duas funções;classes (receptor e remetente) para salvar a informação. Basicamente um melhor método de save().)
from django.db.modelsl import Q //(usado em complex search com queryset | views.py, models.py)
from django.contrib.auth import get_user_model //(serve para pegar o User Model, exceto no models.py. | admin.py)
import pint //(bom para conversão de números inteiros, floats, etc. || Models.py)

### Templates settings.py: ###
DIRS'=[BASE_DIR / "templates"],

### Customizando a página admin: ###
list_display=[]
readonly_fields=[]
raw_id_fields=[]

- usar 'admin.TabularInLine' ou 'admin.StackedInline' inves de 'admin.site.register(abc123)', dar uma olhada no doc.
- Documentação sobre admin Classes para modificar a parte admin e deixar mais dinâmico
https://docs.djangoproject.com/en/3.2/ref/contrib/admin/